"""
Script de prueba para verificar el funcionamiento del sistema
"""

import sys
import os

def test_imports():
    """Prueba que todos los m√≥dulos se pueden importar correctamente."""
    print("üß™ Probando importaciones...")
    
    try:
        # Importar configuraci√≥n
        from config import CameraConfig, ModelsConfig, GlobalConfig
        print("‚úÖ Configuraci√≥n importada correctamente")
        
        # Importar utilidades
        from utils import verificar_dependencias, mostrar_info_sistema
        print("‚úÖ Utilidades importadas correctamente")
        
        # Importar m√≥dulos de captura
        from modules.capture import CamaraTiempoOptimizada
        print("‚úÖ M√≥dulo de captura importado correctamente")
        
        # Importar m√≥dulos de clasificaci√≥n
        from modules.classification import ClasificadorCoplesONNX, ProcesadorImagenClasificacion
        print("‚úÖ M√≥dulos de clasificaci√≥n importados correctamente")
        
        print("‚úÖ Todas las importaciones exitosas!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_configuration():
    """Prueba que la configuraci√≥n se puede cargar correctamente."""
    print("\nüîß Probando configuraci√≥n...")
    
    try:
        from config import CameraConfig, ModelsConfig, GlobalConfig
        
        # Verificar configuraci√≥n de c√°mara
        print(f"   üì∑ IP C√°mara: {CameraConfig.DEFAULT_IP}")
        print(f"   üì∑ Resoluci√≥n: {CameraConfig.ROI_WIDTH}x{CameraConfig.ROI_HEIGHT}")
        print(f"   üì∑ Framerate: {CameraConfig.FRAMERATE}")
        
        # Verificar configuraci√≥n de modelos
        print(f"   üß† Directorio modelos: {ModelsConfig.MODELS_DIR}")
        print(f"   üß† Modelo clasificaci√≥n: {ModelsConfig.CLASSIFICATION_MODEL}")
        
        # Verificar configuraci√≥n global
        print(f"   üåê Directorio salida: {GlobalConfig.ensure_output_dir()}")
        
        print("‚úÖ Configuraci√≥n cargada correctamente!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def test_model_files():
    """Prueba que los archivos del modelo existen."""
    print("\nüìÅ Probando archivos del modelo...")
    
    try:
        from config import ModelsConfig
        
        # Verificar directorio de modelos
        if not os.path.exists(ModelsConfig.MODELS_DIR):
            print(f"‚ùå Directorio de modelos no existe: {ModelsConfig.MODELS_DIR}")
            return False
        
        # Verificar modelo de clasificaci√≥n
        model_path = os.path.join(ModelsConfig.MODELS_DIR, ModelsConfig.CLASSIFICATION_MODEL)
        if not os.path.exists(model_path):
            print(f"‚ùå Modelo de clasificaci√≥n no encontrado: {model_path}")
            return False
        
        # Verificar archivo de clases
        classes_path = os.path.join(ModelsConfig.MODELS_DIR, ModelsConfig.CLASSIFICATION_CLASSES)
        if not os.path.exists(classes_path):
            print(f"‚ùå Archivo de clases no encontrado: {classes_path}")
            return False
        
        # Mostrar informaci√≥n del modelo
        model_size = os.path.getsize(model_path) / (1024 * 1024)  # MB
        print(f"   üß† Modelo: {ModelsConfig.CLASSIFICATION_MODEL}")
        print(f"   üìè Tama√±o: {model_size:.1f} MB")
        print(f"   üìù Clases: {classes_path}")
        
        print("‚úÖ Archivos del modelo verificados!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando archivos: {e}")
        return False

def test_dependencies():
    """Prueba que las dependencias est√°n disponibles."""
    print("\nüì¶ Probando dependencias...")
    
    try:
        from utils import verificar_dependencias
        
        if verificar_dependencias():
            print("‚úÖ Todas las dependencias est√°n disponibles!")
            return True
        else:
            print("‚ö†Ô∏è Algunas dependencias no est√°n disponibles")
            return False
            
    except Exception as e:
        print(f"‚ùå Error verificando dependencias: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas."""
    print("üöÄ INICIANDO PRUEBAS DEL SISTEMA")
    print("=" * 50)
    
    tests = [
        ("Importaciones", test_imports),
        ("Configuraci√≥n", test_configuration),
        ("Archivos del modelo", test_model_files),
        ("Dependencias", test_dependencies)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}...")
        if test_func():
            passed += 1
        print()
    
    # Resumen final
    print("=" * 50)
    print(f"üìä RESUMEN DE PRUEBAS:")
    print(f"   ‚úÖ Exitosas: {passed}")
    print(f"   ‚ùå Fallidas: {total - passed}")
    print(f"   üìà Porcentaje: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ ¬°Todas las pruebas pasaron! El sistema est√° listo para usar.")
        print("\nüí° Para ejecutar el sistema completo:")
        print("   python main.py")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} prueba(s) fallaron. Revisa los errores antes de continuar.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
